/* automatically generated by rust-bindgen 0.71.1 */

use crate::*;
mod link;

pub type Display = core::ffi::c_void;
pub type RRCrtc = *mut core::ffi::c_void;
pub type RROutput = *mut core::ffi::c_void;
pub type Window = *mut core::ffi::c_void;
pub type GLXContext = *mut core::ffi::c_void;
pub type GLXWindow = *mut core::ffi::c_void;
unsafe extern "C" {
    #[doc = " @brief Returns the `Display` used by GLFW.\n\n  @return The `Display` used by GLFW, or `NULL` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetX11Display() -> *mut Display;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `RRCrtc` of the specified monitor.\n\n  @return The `RRCrtc` of the specified monitor, or `None` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.1.\n\n  @ingroup native"]
    pub fn glfwGetX11Adapter(monitor: *mut GLFWmonitor) -> RRCrtc;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `RROutput` of the specified monitor.\n\n  @return The `RROutput` of the specified monitor, or `None` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.1.\n\n  @ingroup native"]
    pub fn glfwGetX11Monitor(monitor: *mut GLFWmonitor) -> RROutput;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `Window` of the specified window.\n\n  @return The `Window` of the specified window, or `None` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetX11Window(window: *mut GLFWwindow) -> Window;
}
unsafe extern "C" {
    #[doc = " @brief Sets the current primary selection to the specified string.\n\n  @param[in] string A UTF-8 encoded string.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_PLATFORM_UNAVAILABLE and @ref GLFW_PLATFORM_ERROR.\n\n  @pointer_lifetime The specified string is copied before this function\n  returns.\n\n  @thread_safety This function must only be called from the main thread.\n\n  @sa @ref clipboard\n  @sa glfwGetX11SelectionString\n  @sa glfwSetClipboardString\n\n  @since Added in version 3.3.\n\n  @ingroup native"]
    pub fn glfwSetX11SelectionString(string: *const core::ffi::c_char);
}
unsafe extern "C" {
    #[doc = " @brief Returns the contents of the current primary selection as a string.\n\n  If the selection is empty or if its contents cannot be converted, `NULL`\n  is returned and a @ref GLFW_FORMAT_UNAVAILABLE error is generated.\n\n  @return The contents of the selection as a UTF-8 encoded string, or `NULL`\n  if an [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_PLATFORM_UNAVAILABLE and @ref GLFW_PLATFORM_ERROR.\n\n  @pointer_lifetime The returned string is allocated and freed by GLFW. You\n  should not free it yourself. It is valid until the next call to @ref\n  glfwGetX11SelectionString or @ref glfwSetX11SelectionString, or until the\n  library is terminated.\n\n  @thread_safety This function must only be called from the main thread.\n\n  @sa @ref clipboard\n  @sa glfwSetX11SelectionString\n  @sa glfwGetClipboardString\n\n  @since Added in version 3.3.\n\n  @ingroup native"]
    pub fn glfwGetX11SelectionString() -> *const core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `GLXContext` of the specified window.\n\n  @return The `GLXContext` of the specified window, or `NULL` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_NO_WINDOW_CONTEXT and @ref GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetGLXContext(window: *mut GLFWwindow) -> GLXContext;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `GLXWindow` of the specified window.\n\n  @return The `GLXWindow` of the specified window, or `None` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_NO_WINDOW_CONTEXT and @ref GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.2.\n\n  @ingroup native"]
    pub fn glfwGetGLXWindow(window: *mut GLFWwindow) -> GLXWindow;
}
