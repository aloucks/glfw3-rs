/* automatically generated by rust-bindgen 0.71.1 */

use crate::*;
mod link;

pub type HWND = *mut core::ffi::c_void;
pub type HGLRC = *mut core::ffi::c_void;
unsafe extern "C" {
    #[doc = " @brief Returns the adapter device name of the specified monitor.\n\n  @return The UTF-8 encoded adapter device name (for example `\\\\.\\DISPLAY1`)\n  of the specified monitor, or `NULL` if an [error](@ref error_handling)\n  occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.1.\n\n  @ingroup native"]
    pub fn glfwGetWin32Adapter(monitor: *mut GLFWmonitor) -> *const core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the display device name of the specified monitor.\n\n  @return The UTF-8 encoded display device name (for example\n  `\\\\.\\DISPLAY1\\Monitor0`) of the specified monitor, or `NULL` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.1.\n\n  @ingroup native"]
    pub fn glfwGetWin32Monitor(monitor: *mut GLFWmonitor) -> *const core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `HWND` of the specified window.\n\n  @return The `HWND` of the specified window, or `NULL` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @remark The `HDC` associated with the window can be queried with the\n  [GetDC](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdc)\n  function.\n  @code\n  HDC dc = GetDC(glfwGetWin32Window(window));\n  @endcode\n  This DC is private and does not need to be released.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetWin32Window(window: *mut GLFWwindow) -> HWND;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `HGLRC` of the specified window.\n\n  @return The `HGLRC` of the specified window, or `NULL` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_PLATFORM_UNAVAILABLE and @ref GLFW_NO_WINDOW_CONTEXT.\n\n  @remark The `HDC` associated with the window can be queried with the\n  [GetDC](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdc)\n  function.\n  @code\n  HDC dc = GetDC(glfwGetWin32Window(window));\n  @endcode\n  This DC is private and does not need to be released.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetWGLContext(window: *mut GLFWwindow) -> HGLRC;
}
