/* automatically generated by rust-bindgen 0.71.1 */

use crate::*;
mod link;

pub type id = *mut core::ffi::c_void;
pub type CGDirectDisplayID = *mut core::ffi::c_void;
unsafe extern "C" {
    #[doc = " @brief Returns the `CGDirectDisplayID` of the specified monitor.\n\n  @return The `CGDirectDisplayID` of the specified monitor, or\n  `kCGNullDirectDisplay` if an [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.1.\n\n  @ingroup native"]
    pub fn glfwGetCocoaMonitor(monitor: *mut GLFWmonitor) -> CGDirectDisplayID;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `NSWindow` of the specified window.\n\n  @return The `NSWindow` of the specified window, or `nil` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetCocoaWindow(window: *mut GLFWwindow) -> id;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `NSView` of the specified window.\n\n  @return The `NSView` of the specified window, or `nil` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\n  GLFW_PLATFORM_UNAVAILABLE.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.4.\n\n  @ingroup native"]
    pub fn glfwGetCocoaView(window: *mut GLFWwindow) -> id;
}
unsafe extern "C" {
    #[doc = " @brief Returns the `NSOpenGLContext` of the specified window.\n\n  @return The `NSOpenGLContext` of the specified window, or `nil` if an\n  [error](@ref error_handling) occurred.\n\n  @errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\n  GLFW_PLATFORM_UNAVAILABLE and @ref GLFW_NO_WINDOW_CONTEXT.\n\n  @thread_safety This function may be called from any thread.  Access is not\n  synchronized.\n\n  @since Added in version 3.0.\n\n  @ingroup native"]
    pub fn glfwGetNSGLContext(window: *mut GLFWwindow) -> id;
}
